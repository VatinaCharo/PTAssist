plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

group 'nju.pt'
version '1.5.0'

// 修改启动脚本
tasks.startScripts {
    doLast {
        // 删除unix启动脚本
        unixScript.delete()
        def windowsScriptFile = getWindowsScript()
        // 向启动脚本中注入指定的java.exe路径，并强制跳转到执行命令
        def startCmdLine ="@rem Set Forced Java.exe and start\nset JAVA_EXE=%APP_HOME%\\jre\\bin\\java.exe goto execute\n\n@rem Find java.exe"
        windowsScriptFile.text = windowsScript.text.replace("@rem Find java.exe", startCmdLine)
        // 启动脚本中添加pause指令
        windowsScriptFile.text = windowsScript.text.replace("\n:end", "pause\n\n:end")
//        print(windowsScriptFile.text)
    }
}
// 打包时加入README.md
distributions {
    main {
        contents {
            from parent.file('README_Server.md')
            parent.file("assets").listFiles().each {
                from(it) {
                    into "assets"
                }
            }
            from(parent.file("jre")) { into "jre"}
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainClassName = 'nju.pt.client.MainKt'
}
kotlin {
    jvmToolchain(17)
}

javafx {
    version = '17.0.6'
    modules = ['javafx.controls']
}

repositories {
    mavenCentral()
}
dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    // 日志
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'ch.qos.logback:logback-core:1.2.11'
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    // 数据库操作依赖
    implementation project(":DatabaseAssist")
    // 网络文件传输
    implementation project(":FileNetAssist")
    //Json序列化
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.3"
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'client_run'
    }
}

jlinkZip {
    group = 'distribution'
}